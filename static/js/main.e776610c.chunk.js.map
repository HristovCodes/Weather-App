{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Main","props","state","weather","city","img","handleChange","bind","getWeather","value","this","setState","loc","openWeatherKey","fetch","mode","coordsResponse","json","coordsData","items","position","lat","lng","weatherResponse","weatherData","icon","current","console","log","className","onSearch","onChange","data","React","Component","Search","e","target","placeholder","type","onClick","Forecast","unit","changeUnit","document","getElementById","classList","replace","desc","description","timezone","id","Image","src","alt","Details","temp","num","dec","num_sign","Math","round","pow","toFixed","preciseRound","humidity","wind_speed","wind_deg","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yWASMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,KAAM,SACNC,IAAK,IAEP,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBARD,E,yDAWNE,GACXC,KAAKC,SAAS,CAAEP,KAAMK,M,+KAKdG,EAAMF,KAAKR,MAAME,KACL,8CACZS,EAAiB,mC,SACMC,MAC3B,mDACEF,EADF,sDAIA,CAAEG,KAAM,S,cALJC,E,gBAOmBA,EAAeC,O,cAAlCC,E,iBACwBJ,MAC5B,uDACEI,EAAWC,MAAM,GAAGC,SAASC,IAC7B,QACAH,EAAWC,MAAM,GAAGC,SAASE,IAC7B,uDACAT,EACF,CAAEE,KAAM,S,eAPJQ,E,iBASoBA,EAAgBN,O,eAApCO,E,OACAC,EAAOD,EAAYE,QAAQvB,QAAQ,GAAGsB,KAC5Cf,KAAKC,SAAS,CACZN,IAAK,oCAAsCoB,EAAO,UAClDtB,QAASqB,I,kBAEJA,G,kCAEPG,QAAQC,IAAR,M,+IAQF,MAH2B,KAAvBlB,KAAKR,MAAMC,SACbO,KAAKF,aAGL,yBAAKqB,UAAU,QACb,kBAAC,EAAD,CACEC,SAAUpB,KAAKF,WACfuB,SAAUrB,KAAKJ,eAEjB,kBAAC,EAAD,CAAU0B,KAAMtB,KAAKR,MAAMC,QAASE,IAAKK,KAAKR,MAAMG,W,GA5DzC4B,IAAMC,WAmEnBC,E,kDACJ,WAAYlC,GAAQ,IAAD,8BACjB,cAAMA,IACDK,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,yDAKN6B,GACX1B,KAAKT,MAAM8B,SAASK,EAAEC,OAAO5B,S,+BAI7B,OACE,yBAAKoB,UAAU,UACb,2BACEA,UAAU,QACVE,SAAUrB,KAAKJ,aACfgC,YAAY,YACZC,KAAK,SAEP,4BAAQV,UAAU,SAASW,QAAS9B,KAAKT,MAAM6B,UAA/C,e,GAnBaG,IAAMC,WA4BrBO,E,kDACJ,WAAYxC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXwC,KAAM,KAER,EAAKC,WAAa,EAAKA,WAAWpC,KAAhB,gBALD,E,yDASO,MAApBG,KAAKR,MAAMwC,MACbE,SAASC,eAAe,UAAUC,UAAUC,QAAQ,IAAK,KACzDrC,KAAKC,SAAS,CAAE+B,KAAM,QAEtBhC,KAAKC,SAAS,CAAE+B,KAAM,MACtBE,SAASC,eAAe,UAAUC,UAAUC,QAAQ,IAAK,Q,+BAK3D,IAAIf,EAAO,GACPgB,EAAO,GAKX,MAJwB,KAApBtC,KAAKT,MAAM+B,OACbA,EAAOtB,KAAKT,MAAM+B,KAClBgB,EAAOtC,KAAKT,MAAM+B,KAAKN,QAAQvB,QAAQ,GAAG8C,aAG1C,yBAAKpB,UAAU,YACb,uBAAGA,UAAU,YAAYG,EAAKkB,UAC9B,4BAAQrB,UAAU,WAAWsB,GAAG,SAASX,QAAS9B,KAAKiC,YACpDjC,KAAKR,MAAMwC,MAEd,kBAAC,EAAD,CAAOM,KAAMA,EAAM3C,IAAKK,KAAKT,MAAMI,MACnC,kBAAC,EAAD,CAASqC,KAAMhC,KAAKR,MAAMwC,KAAMV,KAAMA,EAAMgB,KAAMA,S,GAjCnCf,IAAMC,WAwCvBkB,E,uKAEF,OACE,yBAAKvB,UAAU,SACb,yBAAKwB,IAAK3C,KAAKT,MAAMI,IAAKiD,IAAK5C,KAAKT,MAAM+C,Y,GAJ9Bf,IAAMC,WAWpBqB,E,uKAEF,GAAwB,KAApB7C,KAAKT,MAAM+B,KACb,OACE,yBAAKH,UAAU,eACb,yBAAKA,UAAU,WAAf,kBAIJ,IAAM2B,EACgB,MAApB9C,KAAKT,MAAMyC,KA8BnB,SAAsBe,EAAKC,GACzB,GAAmB,kBAARD,GAAmC,kBAARC,EAAkB,OAAO,EAE/D,IAAIC,EAAWF,GAAO,EAAI,GAAK,EAE/B,OACEG,KAAKC,MAAMJ,EAAMG,KAAKE,IAAI,GAAIJ,GAAkB,KAAXC,GAAqBC,KAAKE,IAAI,GAAIJ,IACvEK,QAAQL,GAVHM,CAAkC,GA1BrBtD,KAAKT,MAAM+B,KAAKN,QAAQ8B,KA0BT,IAAW,EAAG,GAzBvC9C,KAAKT,MAAM+B,KAAKN,QAAQ8B,KAC9B,OACE,yBAAK3B,UAAU,eACb,2BACE,sDADF,IACqCnB,KAAKT,MAAM+C,MAEhD,2BACE,8CADF,IAC6BQ,EAAO,IAAM9C,KAAKT,MAAMyC,MAErD,2BACE,2CADF,IAC0BhC,KAAKT,MAAM+B,KAAKN,QAAQuC,SADlD,MAGA,2BACE,6CADF,IAC4BvD,KAAKT,MAAM+B,KAAKN,QAAQwC,WADpD,QAGA,2BACE,iDADF,IACgCxD,KAAKT,MAAM+B,KAAKN,QAAQyC,SADxD,a,GA3BYlC,IAAMC,WAiDbkC,MAvMf,WACE,OAAO,kBAAC,EAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASC,eAAe,SDyHpB,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.e776610c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles/reset.css\";\nimport \"./styles/Main.scss\";\nimport \"./styles/Loading.scss\";\n\nfunction App() {\n  return <Main />;\n}\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weather: \"\",\n      city: \"London\",\n      img: \"\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.getWeather = this.getWeather.bind(this);\n  }\n\n  handleChange(value) {\n    this.setState({ city: value });\n  }\n\n  async getWeather() {\n    try {\n      const loc = this.state.city;\n      const geoLocKey = \"COlR5onLXsJ6oE1BvpkdrXcuIniiF-eV-3Btzzx49yQ\";\n      const openWeatherKey = \"10c5fbc8f53a296d3b3b5286da23dc96\";\n      const coordsResponse = await fetch(\n        \"https://geocode.search.hereapi.com/v1/geocode?q=\" +\n          loc +\n          \"&apiKey=\" +\n          geoLocKey,\n        { mode: \"cors\" }\n      );\n      const coordsData = await coordsResponse.json();\n      const weatherResponse = await fetch(\n        \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n          coordsData.items[0].position.lat +\n          \"&lon=\" +\n          coordsData.items[0].position.lng +\n          \"&units=imperial&exclude=minutely,daily,hourly&appid=\" +\n          openWeatherKey,\n        { mode: \"cors\" }\n      );\n      const weatherData = await weatherResponse.json();\n      const icon = weatherData.current.weather[0].icon;\n      this.setState({\n        img: \"http://openweathermap.org/img/wn/\" + icon + \"@2x.png\",\n        weather: weatherData,\n      });\n      return weatherData;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    if (this.state.weather === \"\") {\n      this.getWeather();\n    }\n    return (\n      <div className=\"Main\">\n        <Search\n          onSearch={this.getWeather}\n          onChange={this.handleChange}\n        ></Search>\n        <Forecast data={this.state.weather} img={this.state.img}></Forecast>\n      </div>\n    );\n  }\n}\n\n//Input box to search for city\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onChange(e.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Search\">\n        <input\n          className=\"Input\"\n          onChange={this.handleChange}\n          placeholder=\"City name\"\n          type=\"text\"\n        ></input>\n        <button className=\"Button\" onClick={this.props.onSearch}>\n          Search\n        </button>\n      </div>\n    );\n  }\n}\n\n//Container for image and text (degrees wind so on)\nclass Forecast extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      unit: \"c\",\n    };\n    this.changeUnit = this.changeUnit.bind(this);\n  }\n\n  changeUnit() {\n    if (this.state.unit === \"c\") {\n      document.getElementById(\"Switch\").classList.replace(\"c\", \"f\");\n      this.setState({ unit: \"f\" });\n    } else {\n      this.setState({ unit: \"c\" });\n      document.getElementById(\"Switch\").classList.replace(\"f\", \"c\");\n    }\n  }\n\n  render() {\n    let data = \"\";\n    let desc = \"\";\n    if (this.props.data !== \"\") {\n      data = this.props.data;\n      desc = this.props.data.current.weather[0].description;\n    }\n    return (\n      <div className=\"Forecast\">\n        <p className=\"Timezone\">{data.timezone}</p>\n        <button className=\"Switch c\" id=\"Switch\" onClick={this.changeUnit}>\n          {this.state.unit}\n        </button>\n        <Image desc={desc} img={this.props.img}></Image>\n        <Details unit={this.state.unit} data={data} desc={desc}></Details>\n      </div>\n    );\n  }\n}\n\n//Image pulled from giphy using the description of the weather\nclass Image extends React.Component {\n  render() {\n    return (\n      <div className=\"Image\">\n        <img src={this.props.img} alt={this.props.desc}></img>\n      </div>\n    );\n  }\n}\n\n//This is list of details like degrees, wind, chance of rain so on\nclass Details extends React.Component {\n  render() {\n    if (this.props.data === \"\") {\n      return (\n        <div className=\"Description\">\n          <div className=\"Loading\">Loading&#8230;</div>\n        </div>\n      );\n    } else {\n      const temp =\n        this.props.unit === \"c\"\n          ? toCelsius(this.props.data.current.temp)\n          : this.props.data.current.temp;\n      return (\n        <div className=\"Description\">\n          <p>\n            <span>Weather Description:</span> {this.props.desc}\n          </p>\n          <p>\n            <span>Temperature:</span> {temp + \" \" + this.props.unit}\n          </p>\n          <p>\n            <span>Humidity:</span> {this.props.data.current.humidity} %\n          </p>\n          <p>\n            <span>Wind Speed:</span> {this.props.data.current.wind_speed} mph\n          </p>\n          <p>\n            <span>Wind Direction:</span> {this.props.data.current.wind_deg}Â°\n          </p>\n        </div>\n      );\n    }\n  }\n}\n\nfunction toCelsius(fahrenheit) {\n  return preciseRound(((fahrenheit - 32) * 5) / 9, 1);\n}\n\nfunction preciseRound(num, dec) {\n  if (typeof num !== \"number\" || typeof dec !== \"number\") return false;\n\n  var num_sign = num >= 0 ? 1 : -1;\n\n  return (\n    Math.round(num * Math.pow(10, dec) + num_sign * 0.0001) / Math.pow(10, dec)\n  ).toFixed(dec);\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}